// Generated by Cap'n Proto compiler, DO NOT EDIT
// source: paper.capnp

#ifndef CAPNP_INCLUDED_fcffe355ed8c05e9_
#define CAPNP_INCLUDED_fcffe355ed8c05e9_

#include <capnp/generated-header-support.h>

#if CAPNP_VERSION != 6000
#error "Version mismatch between generated code and library headers.  You must use the same version of the Cap'n Proto compiler and library."
#endif


namespace capnp {
namespace schemas {

CAPNP_DECLARE_SCHEMA(c51c5f3190764fd1);
CAPNP_DECLARE_SCHEMA(d03a56a38cfd0199);
CAPNP_DECLARE_SCHEMA(e3ab76b29f88d974);
CAPNP_DECLARE_SCHEMA(fe6b38683f01b795);
CAPNP_DECLARE_SCHEMA(bb51358bea8a4edd);
CAPNP_DECLARE_SCHEMA(aeae18a6b8d91a59);

}  // namespace schemas
}  // namespace capnp

namespace escher {
namespace capnp {

struct MeshVertex {
  MeshVertex() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(c51c5f3190764fd1, 3, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand = &schema->defaultBrand;
    #endif  // !CAPNP_LITE
  };
};

struct NewMesh {
  NewMesh() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(d03a56a38cfd0199, 1, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand = &schema->defaultBrand;
    #endif  // !CAPNP_LITE
  };
};

struct NewMaterial {
  NewMaterial() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(e3ab76b29f88d974, 1, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand = &schema->defaultBrand;
    #endif  // !CAPNP_LITE
  };
};

struct NewDrawable {
  NewDrawable() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(fe6b38683f01b795, 2, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand = &schema->defaultBrand;
    #endif  // !CAPNP_LITE
  };
};

struct DrawCall {
  DrawCall() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(bb51358bea8a4edd, 3, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand = &schema->defaultBrand;
    #endif  // !CAPNP_LITE
  };
};

struct DrawList {
  DrawList() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(aeae18a6b8d91a59, 0, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand = &schema->defaultBrand;
    #endif  // !CAPNP_LITE
  };
};

// =======================================================================================

class MeshVertex::Reader {
public:
  typedef MeshVertex Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand);
  }
#endif  // !CAPNP_LITE

  inline float getX() const;

  inline float getY() const;

  inline float getR() const;

  inline float getG() const;

  inline float getB() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class MeshVertex::Builder {
public:
  typedef MeshVertex Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline float getX();
  inline void setX(float value);

  inline float getY();
  inline void setY(float value);

  inline float getR();
  inline void setR(float value);

  inline float getG();
  inline void setG(float value);

  inline float getB();
  inline void setB(float value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class MeshVertex::Pipeline {
public:
  typedef MeshVertex Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class NewMesh::Reader {
public:
  typedef NewMesh Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand);
  }
#endif  // !CAPNP_LITE

  inline  ::uint32_t getId() const;

  inline bool hasVertices() const;
  inline  ::capnp::List< ::escher::capnp::MeshVertex>::Reader getVertices() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class NewMesh::Builder {
public:
  typedef NewMesh Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::uint32_t getId();
  inline void setId( ::uint32_t value);

  inline bool hasVertices();
  inline  ::capnp::List< ::escher::capnp::MeshVertex>::Builder getVertices();
  inline void setVertices( ::capnp::List< ::escher::capnp::MeshVertex>::Reader value);
  inline  ::capnp::List< ::escher::capnp::MeshVertex>::Builder initVertices(unsigned int size);
  inline void adoptVertices(::capnp::Orphan< ::capnp::List< ::escher::capnp::MeshVertex>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::escher::capnp::MeshVertex>> disownVertices();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class NewMesh::Pipeline {
public:
  typedef NewMesh Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class NewMaterial::Reader {
public:
  typedef NewMaterial Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand);
  }
#endif  // !CAPNP_LITE

  inline  ::uint32_t getId() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class NewMaterial::Builder {
public:
  typedef NewMaterial Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::uint32_t getId();
  inline void setId( ::uint32_t value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class NewMaterial::Pipeline {
public:
  typedef NewMaterial Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class NewDrawable::Reader {
public:
  typedef NewDrawable Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand);
  }
#endif  // !CAPNP_LITE

  inline  ::uint32_t getId() const;

  inline  ::uint32_t getMeshId() const;

  inline  ::uint32_t getMaterialId() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class NewDrawable::Builder {
public:
  typedef NewDrawable Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::uint32_t getId();
  inline void setId( ::uint32_t value);

  inline  ::uint32_t getMeshId();
  inline void setMeshId( ::uint32_t value);

  inline  ::uint32_t getMaterialId();
  inline void setMaterialId( ::uint32_t value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class NewDrawable::Pipeline {
public:
  typedef NewDrawable Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class DrawCall::Reader {
public:
  typedef DrawCall Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand);
  }
#endif  // !CAPNP_LITE

  inline  ::uint32_t getMesh() const;

  inline  ::uint32_t getMaterial() const;

  inline float getX() const;

  inline float getY() const;

  inline float getScale() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class DrawCall::Builder {
public:
  typedef DrawCall Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::uint32_t getMesh();
  inline void setMesh( ::uint32_t value);

  inline  ::uint32_t getMaterial();
  inline void setMaterial( ::uint32_t value);

  inline float getX();
  inline void setX(float value);

  inline float getY();
  inline void setY(float value);

  inline float getScale();
  inline void setScale(float value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class DrawCall::Pipeline {
public:
  typedef DrawCall Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class DrawList::Reader {
public:
  typedef DrawList Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand);
  }
#endif  // !CAPNP_LITE

  inline bool hasList() const;
  inline  ::capnp::List< ::escher::capnp::DrawCall>::Reader getList() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class DrawList::Builder {
public:
  typedef DrawList Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasList();
  inline  ::capnp::List< ::escher::capnp::DrawCall>::Builder getList();
  inline void setList( ::capnp::List< ::escher::capnp::DrawCall>::Reader value);
  inline  ::capnp::List< ::escher::capnp::DrawCall>::Builder initList(unsigned int size);
  inline void adoptList(::capnp::Orphan< ::capnp::List< ::escher::capnp::DrawCall>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::escher::capnp::DrawCall>> disownList();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class DrawList::Pipeline {
public:
  typedef DrawList Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

// =======================================================================================

inline float MeshVertex::Reader::getX() const {
  return _reader.getDataField<float>(
      0 * ::capnp::ELEMENTS);
}

inline float MeshVertex::Builder::getX() {
  return _builder.getDataField<float>(
      0 * ::capnp::ELEMENTS);
}
inline void MeshVertex::Builder::setX(float value) {
  _builder.setDataField<float>(
      0 * ::capnp::ELEMENTS, value);
}

inline float MeshVertex::Reader::getY() const {
  return _reader.getDataField<float>(
      1 * ::capnp::ELEMENTS);
}

inline float MeshVertex::Builder::getY() {
  return _builder.getDataField<float>(
      1 * ::capnp::ELEMENTS);
}
inline void MeshVertex::Builder::setY(float value) {
  _builder.setDataField<float>(
      1 * ::capnp::ELEMENTS, value);
}

inline float MeshVertex::Reader::getR() const {
  return _reader.getDataField<float>(
      2 * ::capnp::ELEMENTS);
}

inline float MeshVertex::Builder::getR() {
  return _builder.getDataField<float>(
      2 * ::capnp::ELEMENTS);
}
inline void MeshVertex::Builder::setR(float value) {
  _builder.setDataField<float>(
      2 * ::capnp::ELEMENTS, value);
}

inline float MeshVertex::Reader::getG() const {
  return _reader.getDataField<float>(
      3 * ::capnp::ELEMENTS);
}

inline float MeshVertex::Builder::getG() {
  return _builder.getDataField<float>(
      3 * ::capnp::ELEMENTS);
}
inline void MeshVertex::Builder::setG(float value) {
  _builder.setDataField<float>(
      3 * ::capnp::ELEMENTS, value);
}

inline float MeshVertex::Reader::getB() const {
  return _reader.getDataField<float>(
      4 * ::capnp::ELEMENTS);
}

inline float MeshVertex::Builder::getB() {
  return _builder.getDataField<float>(
      4 * ::capnp::ELEMENTS);
}
inline void MeshVertex::Builder::setB(float value) {
  _builder.setDataField<float>(
      4 * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t NewMesh::Reader::getId() const {
  return _reader.getDataField< ::uint32_t>(
      0 * ::capnp::ELEMENTS);
}

inline  ::uint32_t NewMesh::Builder::getId() {
  return _builder.getDataField< ::uint32_t>(
      0 * ::capnp::ELEMENTS);
}
inline void NewMesh::Builder::setId( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      0 * ::capnp::ELEMENTS, value);
}

inline bool NewMesh::Reader::hasVertices() const {
  return !_reader.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline bool NewMesh::Builder::hasVertices() {
  return !_builder.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::escher::capnp::MeshVertex>::Reader NewMesh::Reader::getVertices() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::escher::capnp::MeshVertex>>::get(
      _reader.getPointerField(0 * ::capnp::POINTERS));
}
inline  ::capnp::List< ::escher::capnp::MeshVertex>::Builder NewMesh::Builder::getVertices() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::escher::capnp::MeshVertex>>::get(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
inline void NewMesh::Builder::setVertices( ::capnp::List< ::escher::capnp::MeshVertex>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::escher::capnp::MeshVertex>>::set(
      _builder.getPointerField(0 * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::escher::capnp::MeshVertex>::Builder NewMesh::Builder::initVertices(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::escher::capnp::MeshVertex>>::init(
      _builder.getPointerField(0 * ::capnp::POINTERS), size);
}
inline void NewMesh::Builder::adoptVertices(
    ::capnp::Orphan< ::capnp::List< ::escher::capnp::MeshVertex>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::escher::capnp::MeshVertex>>::adopt(
      _builder.getPointerField(0 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::escher::capnp::MeshVertex>> NewMesh::Builder::disownVertices() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::escher::capnp::MeshVertex>>::disown(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}

inline  ::uint32_t NewMaterial::Reader::getId() const {
  return _reader.getDataField< ::uint32_t>(
      0 * ::capnp::ELEMENTS);
}

inline  ::uint32_t NewMaterial::Builder::getId() {
  return _builder.getDataField< ::uint32_t>(
      0 * ::capnp::ELEMENTS);
}
inline void NewMaterial::Builder::setId( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      0 * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t NewDrawable::Reader::getId() const {
  return _reader.getDataField< ::uint32_t>(
      0 * ::capnp::ELEMENTS);
}

inline  ::uint32_t NewDrawable::Builder::getId() {
  return _builder.getDataField< ::uint32_t>(
      0 * ::capnp::ELEMENTS);
}
inline void NewDrawable::Builder::setId( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      0 * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t NewDrawable::Reader::getMeshId() const {
  return _reader.getDataField< ::uint32_t>(
      1 * ::capnp::ELEMENTS);
}

inline  ::uint32_t NewDrawable::Builder::getMeshId() {
  return _builder.getDataField< ::uint32_t>(
      1 * ::capnp::ELEMENTS);
}
inline void NewDrawable::Builder::setMeshId( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      1 * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t NewDrawable::Reader::getMaterialId() const {
  return _reader.getDataField< ::uint32_t>(
      2 * ::capnp::ELEMENTS);
}

inline  ::uint32_t NewDrawable::Builder::getMaterialId() {
  return _builder.getDataField< ::uint32_t>(
      2 * ::capnp::ELEMENTS);
}
inline void NewDrawable::Builder::setMaterialId( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      2 * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t DrawCall::Reader::getMesh() const {
  return _reader.getDataField< ::uint32_t>(
      0 * ::capnp::ELEMENTS);
}

inline  ::uint32_t DrawCall::Builder::getMesh() {
  return _builder.getDataField< ::uint32_t>(
      0 * ::capnp::ELEMENTS);
}
inline void DrawCall::Builder::setMesh( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      0 * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t DrawCall::Reader::getMaterial() const {
  return _reader.getDataField< ::uint32_t>(
      1 * ::capnp::ELEMENTS);
}

inline  ::uint32_t DrawCall::Builder::getMaterial() {
  return _builder.getDataField< ::uint32_t>(
      1 * ::capnp::ELEMENTS);
}
inline void DrawCall::Builder::setMaterial( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      1 * ::capnp::ELEMENTS, value);
}

inline float DrawCall::Reader::getX() const {
  return _reader.getDataField<float>(
      2 * ::capnp::ELEMENTS);
}

inline float DrawCall::Builder::getX() {
  return _builder.getDataField<float>(
      2 * ::capnp::ELEMENTS);
}
inline void DrawCall::Builder::setX(float value) {
  _builder.setDataField<float>(
      2 * ::capnp::ELEMENTS, value);
}

inline float DrawCall::Reader::getY() const {
  return _reader.getDataField<float>(
      3 * ::capnp::ELEMENTS);
}

inline float DrawCall::Builder::getY() {
  return _builder.getDataField<float>(
      3 * ::capnp::ELEMENTS);
}
inline void DrawCall::Builder::setY(float value) {
  _builder.setDataField<float>(
      3 * ::capnp::ELEMENTS, value);
}

inline float DrawCall::Reader::getScale() const {
  return _reader.getDataField<float>(
      4 * ::capnp::ELEMENTS);
}

inline float DrawCall::Builder::getScale() {
  return _builder.getDataField<float>(
      4 * ::capnp::ELEMENTS);
}
inline void DrawCall::Builder::setScale(float value) {
  _builder.setDataField<float>(
      4 * ::capnp::ELEMENTS, value);
}

inline bool DrawList::Reader::hasList() const {
  return !_reader.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline bool DrawList::Builder::hasList() {
  return !_builder.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::escher::capnp::DrawCall>::Reader DrawList::Reader::getList() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::escher::capnp::DrawCall>>::get(
      _reader.getPointerField(0 * ::capnp::POINTERS));
}
inline  ::capnp::List< ::escher::capnp::DrawCall>::Builder DrawList::Builder::getList() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::escher::capnp::DrawCall>>::get(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
inline void DrawList::Builder::setList( ::capnp::List< ::escher::capnp::DrawCall>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::escher::capnp::DrawCall>>::set(
      _builder.getPointerField(0 * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::escher::capnp::DrawCall>::Builder DrawList::Builder::initList(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::escher::capnp::DrawCall>>::init(
      _builder.getPointerField(0 * ::capnp::POINTERS), size);
}
inline void DrawList::Builder::adoptList(
    ::capnp::Orphan< ::capnp::List< ::escher::capnp::DrawCall>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::escher::capnp::DrawCall>>::adopt(
      _builder.getPointerField(0 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::escher::capnp::DrawCall>> DrawList::Builder::disownList() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::escher::capnp::DrawCall>>::disown(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}

}  // namespace
}  // namespace

#endif  // CAPNP_INCLUDED_fcffe355ed8c05e9_
